#################################################
# Backup / Restore
#################################################

- name: Ensure /root/.ssh directory exists
  ansible.builtin.file:
    dest: /root/.ssh
    mode: u=rwx,g=,o=
    owner: root
    state: directory

- name: Install ssh key id_ed25519-backup_raspi.xvx.cz{.pub}
  ansible.builtin.copy:
    src: files/{{ item }}
    dest: "{{ item }}"
    mode: u=rw,g=,o=
    owner: root
  loop:
    - /root/.ssh/id_ed25519-backup_raspi.xvx.cz
    - /root/.ssh/id_ed25519-backup_raspi.xvx.cz.pub
  no_log: true

- name: Creates Backup Prometheus file /etc/cron.d/backup-prometheus
  ansible.builtin.cron:
    name: Backup Prometheus
    weekday: "*"
    minute: "0"
    hour: "3"
    user: root
    job: PROMETHEUS_SNAPSHOT_DIR=$(curl -s -X POST http://127.0.0.1:9090/api/v1/admin/tsdb/snapshot | jq -r '.data.name') && rsync --archive --verbose --delete --log-file=/tmp/backup-prometheus.log -e 'ssh -i /root/.ssh/id_ed25519-backup_raspi.xvx.cz -o StrictHostKeyChecking=no' /var/lib/prometheus/snapshots/${PROMETHEUS_SNAPSHOT_DIR}/ {{ backup_user }}@{{ backup_server }}:{{ backup_directory }}/prometheus/ > /dev/null && rm -rf /var/lib/prometheus/snapshots
    cron_file: backup-prometheus

- name: Creates Backup HASS file /etc/cron.d/backup-hass
  ansible.builtin.cron:
    name: Backup Home Assistant
    weekday: "*"
    minute: "0"
    hour: "3"
    user: root
    job: HASS_BACKUP_FILE=$(ls -t {{ hass_config_directory }}/backups/*.tar | head -1) && rsync --archive --verbose --delete --log-file=/tmp/backup-hass.log --rsh='ssh -i /root/.ssh/id_ed25519-backup_raspi.xvx.cz -o StrictHostKeyChecking=no' "${HASS_BACKUP_FILE}" "{{ backup_user }}@{{ backup_server }}:{{ backup_directory }}/hass_config/hass_config_latest_backup.tar" > /dev/null && rm {{ hass_config_directory }}/backups/*.tar
    cron_file: backup-hass

- name: Check if /var/log/restore-prometheus.log exists
  ansible.builtin.stat:
    path: /var/log/restore-prometheus.log
  register: prometheus_restore_log

- name: Restore Prometheus from backup
  when: not prometheus_restore_log.stat.exists
  block:
    - name: Stop Prometheus
      ansible.builtin.systemd_service:
        name: prometheus
        state: stopped

    - name: Restore Prometheus from backup # noqa: command-instead-of-module
      ansible.builtin.shell: |
        rsync --archive --verbose --delete --log-file=/var/log/restore-prometheus.log --rsh='ssh -i /root/.ssh/id_ed25519-backup_raspi.xvx.cz -o StrictHostKeyChecking=no' {{ backup_user }}@{{ backup_server }}:{{ backup_directory }}/prometheus/ /var/lib/prometheus/
      changed_when: true

    - name: Start Prometheus
      ansible.builtin.systemd_service:
        name: prometheus
        state: started
  rescue:
    - name: Print when errors
      ansible.builtin.fail:
        msg: Restore from backup failed

- name: Check if /var/log/restore-hass.log exists
  ansible.builtin.stat:
    path: /var/log/restore-hass.log
  register: hass_restore_log

- name: Create HASS directory (/var/lib/hass_config)
  when: not hass_restore_log.stat.exists
  ansible.builtin.file:
    path: /var/lib/hass_config/blueprints/automation/homeassistant
    state: directory
    recurse: true

- name: Restore HASS from backup # noqa: command-instead-of-module
  when: not hass_restore_log.stat.exists
  ansible.builtin.shell: |
    set -o pipefail
    ssh -i /root/.ssh/id_ed25519-backup_raspi.xvx.cz -o StrictHostKeyChecking=no {{ backup_user }}@{{ backup_server }} 'cat {{ backup_directory }}/hass_config/hass_config_latest_backup.tar' | tar -xf - homeassistant.tar.gz --to-stdout | tar xvzf - -C "{{ hass_config_directory }}" --wildcards "data/home-assistant*" --strip-components=1 > /var/log/restore-hass.log
  args:
    executable: /bin/bash
  changed_when: true

#################################################
# Prometheus
#################################################

- name: Create HASS scape config for Prometheus (/etc/prometheus/scrape_configs/hass.yml)
  ansible.builtin.copy:
    dest: /etc/prometheus/scrape_configs/hass.yml
    content: |
      scrape_configs:
        - job_name: hass
          scrape_interval: 60s
          metrics_path: /api/prometheus
          bearer_token: "{{ prometheus_hass_bearer_token }}"
          static_configs:
            - targets:
                - 127.0.0.1:8123
    mode: u=rw,g=,o=
    owner: prometheus
    group: prometheus
  no_log: true
  notify: Restart prometheus

#################################################
# Cloudflared
#################################################

- name: Add Cloudflare apt signing keys
  ansible.builtin.get_url:
    url: https://pkg.cloudflare.com/cloudflare-main.gpg
    dest: /etc/apt/trusted.gpg.d/cloudflare.gpg
    mode: u=rw,g=r,o=r

- name: Add Cloudflare repository
  ansible.builtin.apt_repository:
    repo: deb https://pkg.cloudflare.com/cloudflared {{ ansible_distribution_release }} main
    filename: cloudflared

- name: Install cloudflared
  ansible.builtin.apt:
    name: cloudflared
    install_recommends: false
  register: result
  until: result is succeeded

- name: Copy cloudflared systemd unit file into place
  ansible.builtin.template:
    src: files/etc/systemd/system/cloudflared.service
    dest: /etc/systemd/system/cloudflared.service
    mode: u=rw,g=r,o=r
  notify: Reload systemd

- name: Configure cloudflared
  ansible.builtin.copy:
    dest: /etc/default/cloudflared
    content: |
      CLOUDFLARED_TOKEN={{ cloudflared_tunnel_token }}
    mode: u=rw,g=,o=
  no_log: true
  notify: Restart cloudflared

#################################################
# Mosquitto
#################################################

- name: Add Mosquitto apt signing keys
  # checkov:skip=CKV2_ANSIBLE_2:Ensure that HTTPS url is used with get_url
  ansible.builtin.get_url:
    url: http://repo.mosquitto.org/debian/mosquitto-repo.gpg.key
    dest: /etc/apt/trusted.gpg.d/mosquitto-repo.asc
    mode: u=rw,g=r,o=r

- name: Add Mosquitto repository
  ansible.builtin.apt_repository:
    repo: deb https://repo.mosquitto.org/debian {{ ansible_distribution_release }} main
    filename: mosquitto

- name: Install mosquitto
  ansible.builtin.apt:
    name: mosquitto
    install_recommends: false
  register: result
  until: result is succeeded

- name: Create '/etc/mosquitto/conf.d/my.conf' file
  ansible.builtin.copy:
    dest: /etc/mosquitto/conf.d/my.conf
    content: |
      listener      1883
      protocol      mqtt
      password_file /etc/mosquitto/password_file
    mode: u=rw,g=,o=
    owner: mosquitto
    group: mosquitto
  notify: Restart mosquitto

- name: Create '/etc/mosquitto/password_file' file
  ansible.builtin.template:
    dest: /etc/mosquitto/password_file
    src: files/etc/mosquitto/password_file.j2
    mode: u=rw,g=,o=
    owner: mosquitto
    group: mosquitto
  no_log: true
  notify: Restart mosquitto
  changed_when: false

#################################################
# Zigbee2MQTT
#################################################

- name: Create Zigbee2MQTT directory (/var/lib/zigbee2mqtt)
  ansible.builtin.file:
    path: /var/lib/zigbee2mqtt
    state: directory
    recurse: true

- name: Configure Zigbee2MQTT (/var/lib/zigbee2mqtt/configuration.yaml)
  ansible.builtin.template:
    dest: /var/lib/zigbee2mqtt/configuration.yaml
    src: files/var/lib/zigbee2mqtt/configuration.yaml.j2
    mode: u=rw,g=r,o=r
  no_log: true
  notify: Restart zigbee2mqtt

- name: Copy the Zigbee2MQTT database (/var/lib/zigbee2mqtt/database.db)
  ansible.builtin.copy:
    dest: /var/lib/zigbee2mqtt/database.db
    src: files/var/lib/zigbee2mqtt/database.db
    mode: u=rw,g=r,o=r
  no_log: true
  notify: Restart zigbee2mqtt

- name: Zigbee2MQTT container
  community.docker.docker_container:
    name: zigbee2mqtt
    image: docker.io/koenkk/zigbee2mqtt:2.3.0@sha256:42de8c55dc578a8404a18c43aeb2b7c75be7988179abe9a8195d99a9e7ebb917
    comparisons:
      image: strict
      labels: allow_more_present
      volumes: allow_more_present
    volumes:
      - /run/dbus:/run/dbus:ro
      - /var/lib/zigbee2mqtt:/app/data
    ports:
      - 8082:8080
    env:
      TZ: "{{ timezone }}"
    labels:
      homepage.group: Containers
      homepage.name: Zigbee2MQTT
      homepage.icon: https://raw.githubusercontent.com/Koenkk/zigbee2mqtt.io/bfd27df45e931d18675eb5aba8bdcbaf688a608f/docs/images/logo.png
      homepage.description: Zigbee üêù to MQTT bridge üåâ, get rid of your proprietary Zigbee bridges üî®
    restart_policy: always
    timeout: "{{ docker_container_timeout }}"
  notify: Restart zigbee2mqtt

#################################################
# ESPHome
#################################################

- name: Create ESPHome directory (/var/lib/esphome/config)
  ansible.builtin.file:
    path: /var/lib/esphome/config
    state: directory
    recurse: true

- name: Configure ESPHome (/var/lib/esphome/config/apollo-msr-2.yaml)
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: u=rw,g=r,o=r
  loop:
    - dest: /var/lib/esphome/config/apollo-msr-2-f585f4.yaml
      src: files/var/lib/esphome/config/apollo-msr-2-f585f4.yaml.j2
  notify: Restart esphome

- name: Create secret file for ESPHome
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: u=rw,g=,o=
  loop:
    - dest: /var/lib/esphome/config/secrets.yaml
      src: files/var/lib/esphome/config/secrets.yaml.j2
  no_log: true
  notify: Restart esphome

- name: ESPHome container
  community.docker.docker_container:
    name: esphome
    image: ghcr.io/esphome/esphome:2025.5.0@sha256:5429ecc3e9cc9d7a446321c0879fee12fc2a98f02f278ade983b37cdfb13f6f9
    comparisons:
      image: strict
      labels: allow_more_present
      volumes: allow_more_present
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/lib/esphome/config:/config
    # This is needed for the mDNS - no autodiscovery without it
    network_mode: host
    labels:
      homepage.group: Containers
      homepage.name: ESPHome
      homepage.icon: https://raw.githubusercontent.com/esphome/esphome-docs/e28345cd8f1c9380bc25dd977fcf443ba5c8612c/images/logo.svg
      homepage.description: ESPHome is a system to control your ESP8266/ESP32 by simple yet powerful configuration files and control them remotely through Home Automation systems.
    restart_policy: always
    timeout: "{{ docker_container_timeout }}"
  notify: Restart esphome

#################################################
# Home Assistant
#################################################

- name: Download automation/blueprints files
  ansible.builtin.get_url:
    url: "{{ item }}"
    dest: "{{ hass_config_directory }}/blueprints/automation/homeassistant/{{ item | basename }}"
    mode: u=rw,g=r,o=r
  loop:
    - https://raw.githubusercontent.com/home-assistant/core/refs/heads/dev/homeassistant/components/automation/blueprints/motion_light.yaml
    - https://raw.githubusercontent.com/home-assistant/core/refs/heads/dev/homeassistant/components/automation/blueprints/notify_leaving_zone.yaml
  notify: Restart hass

- name: Copy config files for Home Assistant to {{ hass_config_directory }}/
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: "{{ hass_config_directory }}/"
    mode: u=rw,g=r,o=r
  loop:
    - files/{{ hass_config_directory }}/.storage
    - files/{{ hass_config_directory }}/lovelace
    - files/{{ hass_config_directory }}/known_devices.yaml
    - files/{{ hass_config_directory }}/automations.yaml
  notify: Restart hass

- name: Create config files for Home Assistant to {{ hass_config_directory }}
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: u=rw,g=r,o=r
  loop:
    - dest: "{{ hass_config_directory }}/configuration.yaml"
      src: files/{{ hass_config_directory }}/configuration.yaml.j2
  notify: Restart hass

- name: Create secret file for Home Assistant to {{ hass_config_directory }}
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: u=rw,g=,o=
  loop:
    - dest: "{{ hass_config_directory }}/secrets.yaml"
      src: files/{{ hass_config_directory }}/secrets.yaml.j2
  no_log: true
  notify: Restart hass

- name: Home Assistant container
  community.docker.docker_container:
    name: home-assistant
    image: ghcr.io/home-assistant/home-assistant:2025.5.3@sha256:8a99004ff832dbd535e6ac4d141042bc31141ff6a86b4d5bb288b3680fbceac1
    comparisons:
      image: strict
      labels: allow_more_present
      volumes: allow_more_present
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /run/dbus:/run/dbus:ro
      - "{{ hass_config_directory }}:/config"
    network_mode: host
    privileged: true
    labels:
      homepage.group: Containers
      homepage.name: Home Assistant
      homepage.icon: https://upload.wikimedia.org/wikipedia/en/4/49/Home_Assistant_logo_%282023%29.svg
      homepage.href: "{{ hass_url }}"
      homepage.description: Open source home automation that puts local control and privacy first.
    restart_policy: always
    timeout: "{{ docker_container_timeout }}"
  notify: Restart hass

- name: Wait for HASS to be started
  when: not hass_restore_log.stat.exists
  ansible.builtin.wait_for:
    port: 8123

- name: Install HACS
  when: not hass_restore_log.stat.exists
  community.docker.docker_container_exec:
    container: home-assistant
    command: bash -c "wget -O - https://get.hacs.xyz | bash -"
    chdir: /config
  notify: Restart hass

#################################################
# Homepage
#################################################

- name: Create homepage directory (/var/lib/homepage/config)
  ansible.builtin.file:
    path: /var/lib/homepage/config
    state: directory
    recurse: true

- name: Copy config files for homepage to /var/lib/homepage/config
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "/var/lib/homepage/config/{{ item | basename | regex_replace('\\.j2$', '') }}"
    mode: u=rw,g=r,o=r
  with_fileglob:
    - files/var/lib/homepage/config/*.j2
  no_log: true
  notify: Restart homepage

- name: Homepage container
  community.docker.docker_container:
    name: homepage
    image: ghcr.io/gethomepage/homepage:v1.2.0@sha256:5e6bcbb595c4e857540577135e0f8b3ffc2e97c23d6e0ddc7df183de5bfdd442
    comparisons:
      image: strict
      labels: allow_more_present
      volumes: allow_more_present
    volumes:
      - /var/lib/homepage/config:/app/config
      - /var/run/docker.sock:/var/run/docker.sock:ro
    network_mode: host
    privileged: true
    env:
      LOG_TARGETS: stdout
    labels:
      homepage.group: Containers
      homepage.name: Homepage
      homepage.icon: https://raw.githubusercontent.com/gethomepage/homepage/47765ee05e633c87fcf8fca8ee1293bf0ef6bb3e/docs/assets/light_squircle%402x.png
      homepage.href: https://rpi.xvx.cz/
      homepage.description: A modern, fully static, fast, secure fully proxied, highly customizable application dashboard with integrations for over 100 services and translations into multiple languages.
    restart_policy: always
    timeout: "{{ docker_container_timeout }}"
  notify: Restart homepage

#################################################
# Kodi
#################################################

- name: Add kodi group
  ansible.builtin.group:
    name: kodi

- name: Add kodi user
  ansible.builtin.user:
    name: kodi
    comment: Kodi
    shell: /usr/bin/sh
    groups: audio,input,uucp,video,plugdev
    group: kodi

- name: Create startup script for Kodi
  ansible.builtin.copy:
    src: lib/systemd/system/kodi.service
    dest: /lib/systemd/system/kodi.service
    mode: u=rw,g=r,o=r
  notify:
    - Restart kodi

- name: Change default target to graphical.target
  ansible.builtin.file:
    src: /usr/lib/systemd/system/graphical.target
    dest: /etc/systemd/system/default.target
    state: link

- name: Copy Kodi configuration files
  ansible.posix.synchronize:
    src: home/kodi/.kodi
    dest: /home/kodi/
  # These files are frequently updated by Kodi
  changed_when: false
  notify: Restart kodi

- name: Additional Kodi configuration
  ansible.builtin.template:
    dest: "{{ item.dest }}"
    src: "{{ item.src }}"
    mode: u=rw,g=,o=
  loop:
    # This file is frequently updated by Kodi
    - dest: /home/kodi/.kodi/userdata/guisettings.xml
      src: files/home/kodi/.kodi/userdata/guisettings.xml.j2
    - dest: /home/kodi/.kodi/userdata/sources.xml
      src: files/home/kodi/.kodi/userdata/sources.xml.j2
  changed_when: false

- name: Chown "/home/kodi"
  ansible.builtin.file:
    path: /home/kodi
    owner: kodi
    group: kodi
    recurse: true
  changed_when: false

# It happens sometimes, that the Kodi don't start for the first time - SubState": "dead"
- name: Start Kodi
  ansible.builtin.systemd_service:
    name: kodi
    state: started
    enabled: true
  register: result
  until: result.status.SubState == "running"

- name: Wait for Kodi to be started
  ansible.builtin.wait_for:
    port: 8080

- name: Enable Kodi Visualization addon spectrum
  ansible.builtin.command: sqlite3 /home/kodi/.kodi/userdata/Database/Addons33.db "UPDATE installed SET enabled = 1 WHERE addonID = '{{ item }}'"
  loop:
    - visualization.spectrum
  register: result
  until: result is succeeded
  delay: 10
  changed_when: false

- name: Flush handlers
  ansible.builtin.meta: flush_handlers

- name: Wait for Kodi to be started
  ansible.builtin.wait_for:
    port: 8080

- name: Refresh Music Library
  no_log: true
  # checkov:skip=CKV2_ANSIBLE_1
  ansible.builtin.uri:
    url: http://{{ ansible_host }}:8080/jsonrpc
    user: kodi
    password: "{{ kodi_guisettings_services_webserverpassword }}"
    method: POST
    body: '{ "jsonrpc": "2.0", "method": "AudioLibrary.Scan", "id": "ansible" }'
    force_basic_auth: true
    body_format: json

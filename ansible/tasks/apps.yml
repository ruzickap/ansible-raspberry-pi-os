#################################################
# Cloudflared
#################################################

- name: Add Cloudflare apt signing keys
  ansible.builtin.get_url:
    url: https://pkg.cloudflare.com/cloudflare-main.gpg
    dest: /etc/apt/trusted.gpg.d/cloudflare.gpg
    mode: u=rw,g=r,o=r

- name: Add Cloudflare repository
  ansible.builtin.apt_repository:
    repo: deb https://pkg.cloudflare.com/cloudflared {{ ansible_distribution_release }} main
    filename: cloudflared

- name: Install cloudflared
  ansible.builtin.apt:
    name: cloudflared
    install_recommends: false
  register: result
  until: result is succeeded

- name: Copy cloudflared systemd unit file into place
  ansible.builtin.template:
    src: files/etc/systemd/system/cloudflared.service
    dest: /etc/systemd/system/cloudflared.service
    mode: u=rw,g=r,o=r
  notify: Reload systemd

- name: Configure cloudflared
  ansible.builtin.copy:
    dest: /etc/default/cloudflared
    content: |
      CLOUDFLARED_TOKEN={{ cloudflared_tunnel_token }}
    mode: u=rw,g=,o=
  no_log: true
  notify: Restart cloudflared

#################################################
# Mosquitto
#################################################

- name: Add Mosquitto apt signing keys
  # checkov:skip=CKV2_ANSIBLE_2:Ensure that HTTPS url is used with get_url
  ansible.builtin.get_url:
    url: http://repo.mosquitto.org/debian/mosquitto-repo.gpg.key
    dest: /etc/apt/trusted.gpg.d/mosquitto-repo.asc
    mode: u=rw,g=r,o=r

- name: Add Mosquitto repository
  ansible.builtin.apt_repository:
    repo: deb https://repo.mosquitto.org/debian {{ ansible_distribution_release }} main
    filename: mosquitto

- name: Install mosquitto
  ansible.builtin.apt:
    name: mosquitto
    install_recommends: false
  register: result
  until: result is succeeded

- name: Create '/etc/mosquitto/conf.d/my.conf' file
  ansible.builtin.copy:
    dest: /etc/mosquitto/conf.d/my.conf
    content: |
      listener      1883
      protocol      mqtt
      password_file /etc/mosquitto/password_file
    mode: u=rw,g=,o=
  notify: Restart mosquitto

- name: Create '/etc/mosquitto/password_file' file
  ansible.builtin.template:
    dest: /etc/mosquitto/password_file
    src: files/etc/mosquitto/password_file.j2
    mode: u=rw,g=r,o=r
  no_log: true
  notify: Restart mosquitto

#################################################
# Zigbee2MQTT
#################################################

- name: Create Zigbee2MQTT directory (/var/lib/zigbee2mqtt)
  ansible.builtin.file:
    path: /var/lib/zigbee2mqtt
    state: directory
    recurse: true

- name: Configure Zigbee2MQTT (/var/lib/zigbee2mqtt/configuration.yaml)
  ansible.builtin.template:
    dest: /var/lib/zigbee2mqtt/configuration.yaml
    src: files/var/lib/zigbee2mqtt/configuration.yaml.j2
    mode: u=rwx,g=r,o=r
  no_log: true
  notify: Restart zigbee2mqtt

- name: Zigbee2MQTT container
  community.docker.docker_container:
    name: zigbee2mqtt
    image: docker.io/koenkk/zigbee2mqtt:1.39.1@sha256:1f5f59f0e67c4271f7773dd1e3f2a90b3354a1b36492fbc1b2b9facbce3af07f
    volumes:
      - /run/dbus:/run/dbus:ro
      - /var/lib/zigbee2mqtt:/app/data
    ports:
      - 8082:8080
    env:
      TZ: "{{ timezone }}"
    labels:
      io.containers.autoupdate: registry
      homepage.group: Containers
      homepage.name: Zigbee2MQTT
      homepage.icon: https://raw.githubusercontent.com/Koenkk/zigbee2mqtt.io/bfd27df45e931d18675eb5aba8bdcbaf688a608f/docs/images/logo.png
      homepage.description: Zigbee 🐝 to MQTT bridge 🌉, get rid of your proprietary Zigbee bridges 🔨
    restart_policy: always
    timeout: "{{ docker_container_timeout }}"
  notify: Restart zigbee2mqtt

#################################################
# ESPHome
#################################################

- name: Create ESPHome directory (/var/lib/esphome/config)
  ansible.builtin.file:
    path: /var/lib/esphome/config
    state: directory
    recurse: true

- name: Configure ESPHome (/var/lib/esphome/config/xiaomi-miija-lywsd03mmc.yaml)
  ansible.builtin.template:
    dest: /var/lib/esphome/config/xiaomi-miija-lywsd03mmc.yaml
    src: files/var/lib/esphome/config/xiaomi-miija-lywsd03mmc.yaml
    mode: u=rwx,g=r,o=r
  notify: Restart esphome

- name: ESPHome container
  community.docker.docker_container:
    name: esphome
    image: ghcr.io/esphome/esphome:2024.8.0@sha256:74914cd1217375c8549a6f97f77b08d64eaccbdda6238672225398f7ddff84cf
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/lib/esphome/config:/config
    ports:
      - 6052:6052
    labels:
      io.containers.autoupdate: registry
      homepage.group: Containers
      homepage.name: ESPHome
      homepage.icon: https://raw.githubusercontent.com/esphome/esphome-docs/e28345cd8f1c9380bc25dd977fcf443ba5c8612c/images/logo.svg
      homepage.description: ESPHome is a system to control your ESP8266/ESP32 by simple yet powerful configuration files and control them remotely through Home Automation systems.
    restart_policy: always
    timeout: "{{ docker_container_timeout }}"
  notify: Restart esphome

#################################################
# Home Assistant
#################################################

# - name: Check that the directory exists - {{ hass_config_directory }}
#   ansible.builtin.stat:
#     path: "{{ hass_config_directory }}"
#   register: hass_config_dir

# - name: Check if there are any HASS backups
#   ansible.builtin.find:
#     paths: "{{ hass_backup_directory }}"
#   register: hass_backups

# - name: Create hass config directory - {{ hass_config_directory }}
#   ansible.builtin.file:
#     path: "{{ hass_config_directory }}"
#     state: directory
#     mode: u=rwx,g=rx,o=rx

# - name: Copy config files for Home Assistant to {{ hass_config_directory }}
#   ansible.builtin.copy:
#     src: "{{ item.src }}"
#     dest: "{{ item.dest }}"
#     mode: u=rw,g=r,o=r
#   loop:
#     - dest: /var/lib/hass_config/automations.yaml
#       src: files/var/lib/hass_config/automations.yaml
#     - dest: /var/lib/hass_config/known_devices.yaml
#       src: files/var/lib/hass_config/known_devices.yaml
#   notify: Restart hass

# - name: Create config files for Home Assistant to {{ hass_config_directory }}
#   ansible.builtin.template:
#     src: "{{ item.src }}"
#     dest: "{{ item.dest }}"
#     mode: u=rw,g=r,o=r
#   loop:
#     - dest: /var/lib/hass_config/configuration.yaml
#       src: files/var/lib/hass_config/configuration.yaml.j2
#   notify: Restart hass

# - name: Create secret file for Home Assistant to {{ hass_config_directory }}
#   ansible.builtin.template:
#     src: "{{ item.src }}"
#     dest: "{{ item.dest }}"
#     mode: u=rw,g=,o=
#   loop:
#     - dest: /var/lib/hass_config/secrets.yaml
#       src: files/var/lib/hass_config/secrets.yaml.j2
#   no_log: true
#   notify: Restart hass

# - name: Restore Home Assistant configuration from backup
#   when: not hass_config_dir.stat.exists and hass_backups.matched > 0
#   notify: Restart hass
#   block:
#     - name: Unpack the tar backup
#       ansible.builtin.unarchive:
#         src: "{{ (hass_backups.files | sort(attribute='mtime') | last).path }}"
#         dest: /tmp/
#         include: "homeassistant.tar.gz"
#         remote_src: true
#       changed_when: false

#     - name: Unpack the homeassistant.tar.gz
#       ansible.builtin.unarchive:
#         src: /tmp/homeassistant.tar.gz
#         dest: "{{ hass_config_directory }}"
#         extra_opts:
#           - "--strip-components=1"
#         remote_src: true
#       changed_when: false

#     - name: Delete /tmp/homeassistant.tar.gz
#       ansible.builtin.file:
#         path: /tmp/homeassistant.tar.gz
#         state: absent
#   rescue:
#     - name: Print when errors
#       ansible.builtin.fail:
#         msg: Restore from backup failed

# - name: Home Assistant container
#   community.docker.docker_container:
#     name: home-assistant
#     image: ghcr.io/home-assistant/home-assistant:2024.8.2@sha256:b5c4bef2494f84806423c0116bab2a8758c5be386e11af0d3bd7359a18ba77a7
#     volumes:
#       - /etc/localtime:/etc/localtime:ro
#       - /run/dbus:/run/dbus:ro
#       - "{{ hass_config_directory }}:/config"
#       - "{{ hass_backup_directory }}:/config/backups"
#     network_mode: host
#     privileged: true
#     labels:
#       io.containers.autoupdate: registry
#       homepage.group: Containers
#       homepage.name: Home Assistant
#       homepage.icon: https://upload.wikimedia.org/wikipedia/en/4/49/Home_Assistant_logo_%282023%29.svg
#       homepage.href: "{{ hass_url }}"
#       homepage.description: Open source home automation that puts local control and privacy first.
#     restart_policy: always
#     timeout: "{{ docker_container_timeout }}"
#   notify: Restart hass

#################################################
# Homepage
#################################################

- name: Create homepage directory (/var/lib/homepage/config)
  ansible.builtin.file:
    path: /var/lib/homepage/config
    state: directory
    recurse: true

- name: Copy config files for homepage to /var/lib/homepage/config
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: u=rw,g=r,o=r
  no_log: true
  loop:
    - dest: /var/lib/homepage/config/bookmarks.yaml
      src: files/var/lib/homepage/config/bookmarks.yaml.j2
    - dest: /var/lib/homepage/config/docker.yaml
      src: files/var/lib/homepage/config/docker.yaml.j2
    - dest: /var/lib/homepage/config/widgets.yaml
      src: files/var/lib/homepage/config/widgets.yaml.j2
    - dest: /var/lib/homepage/config/services.yaml
      src: files/var/lib/homepage/config/services.yaml.j2
    - dest: /var/lib/homepage/config/settings.yaml
      src: files/var/lib/homepage/config/settings.yaml.j2
  notify: Restart homepage

- name: Homepage container
  community.docker.docker_container:
    name: homepage
    image: ghcr.io/gethomepage/homepage:v0.9.6@sha256:e5b2616d17db8961a53c0b7d389d812d31c265d35696d475732f53278c9276f7
    volumes:
      - /var/lib/homepage/config:/app/config
      - /var/run/docker.sock:/var/run/docker.sock:ro
    network_mode: host
    privileged: true
    env:
      LOG_TARGETS: stdout
    labels:
      io.containers.autoupdate: registry
      homepage.group: Containers
      homepage.name: Homepage
      homepage.icon: https://raw.githubusercontent.com/gethomepage/homepage/47765ee05e633c87fcf8fca8ee1293bf0ef6bb3e/docs/assets/light_squircle%402x.png
      homepage.href: https://rpi.xvx.cz/
      homepage.description: A modern, fully static, fast, secure fully proxied, highly customizable application dashboard with integrations for over 100 services and translations into multiple languages.
    restart_policy: always
    timeout: "{{ docker_container_timeout }}"
  notify: Restart homepage

#################################################
# Kodi
#################################################

- name: Add kodi group
  ansible.builtin.group:
    name: kodi

- name: Add kodi user
  ansible.builtin.user:
    name: kodi
    comment: Kodi
    shell: /usr/bin/sh
    groups: audio,input,uucp,video
    group: kodi

- name: Create startup script for Kodi
  ansible.builtin.copy:
    src: lib/systemd/system/kodi.service
    dest: /lib/systemd/system/kodi.service
    mode: u=rw,g=r,o=r
  notify:
    - Restart kodi

- name: Change default target to graphical.target
  ansible.builtin.file:
    src: /usr/lib/systemd/system/graphical.target
    dest: /etc/systemd/system/default.target
    state: link

- name: Create Kodi addon directory (/home/kodi/.kodi/addons)
  ansible.builtin.file:
    path: /home/kodi/.kodi/addons
    state: directory
    recurse: true
    owner: kodi
    group: kodi

- name: Get the latest version of YouTube Kodi plugin
  ansible.builtin.uri:
    url: https://api.github.com/repos/anxdpanic/plugin.video.youtube/releases/latest
  register: github_api_youtube_kodi_plugin

- name: Download and unpack the YouTube Kodi plugin
  ansible.builtin.unarchive:
    src: "{{ github_api_youtube_kodi_plugin.json.assets[0].browser_download_url }}"
    dest: /home/kodi/.kodi/addons/
    remote_src: true
    creates: /home/kodi/.kodi/addons/plugin.video.youtube

- name: Copy Kodi configuration files
  ansible.posix.synchronize:
    src: home/kodi/.kodi
    dest: /home/kodi/
  # These files are frequently updated by Kodi
  changed_when: false
  notify: Restart kodi

- name: Additional Kodi configuration
  ansible.builtin.template:
    dest: "{{ item.dest }}"
    src: "{{ item.src }}"
    mode: u=rw,g=,o=
  loop:
    # This file is frequently updated by Kodi
    - dest: /home/kodi/.kodi/userdata/guisettings.xml
      src: files/home/kodi/.kodi/userdata/guisettings.xml.j2
    - dest: /home/kodi/.kodi/userdata/sources.xml
      src: files/home/kodi/.kodi/userdata/sources.xml.j2
  changed_when: false

- name: Chown "/home/kodi"
  ansible.builtin.file:
    path: /home/kodi
    owner: kodi
    group: kodi
    recurse: true
  changed_when: false

# It happens sometimes, that the Kodi don't start for the first time - SubState": "dead"
- name: Start Kodi
  ansible.builtin.systemd_service:
    name: kodi
    state: started
    enabled: true
  register: result
  until: result.status.SubState == "running"

- name: Wait for Kodi to be started
  ansible.builtin.wait_for:
    port: 8080

- name: Enable YouTube Kodi plugin in database
  ansible.builtin.command: sqlite3 /home/kodi/.kodi/userdata/Database/Addons33.db "UPDATE installed SET enabled = 1 WHERE addonID = 'plugin.video.youtube'"
  register: result
  until: result is succeeded
  delay: 10
  changed_when: false

- name: Enable Kodi Visualization addon spectrum
  ansible.builtin.command: sqlite3 /home/kodi/.kodi/userdata/Database/Addons33.db "UPDATE installed SET enabled = 1 WHERE addonID = '{{ item }}'"
  loop:
    - visualization.spectrum
  register: result
  until: result is succeeded
  delay: 10
  changed_when: false

- name: Flush handlers
  ansible.builtin.meta: flush_handlers

- name: Wait for Kodi to be started
  ansible.builtin.wait_for:
    port: 8080

- name: Refresh Music Library
  no_log: true
  # checkov:skip=CKV2_ANSIBLE_1
  ansible.builtin.uri:
    url: http://{{ ansible_host }}:8080/jsonrpc
    user: kodi
    password: "{{ kodi_guisettings_services_webserverpassword }}"
    method: POST
    body: '{ "jsonrpc": "2.0", "method": "AudioLibrary.Scan", "id": "ansible" }'
    force_basic_auth: true
    body_format: json

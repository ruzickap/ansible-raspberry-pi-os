- name: Set authorized key for backup script
  authorized_key:
    user: root
    key: "{{ lookup('file', lookup('env','HOME') + '/Documents/backups/id_ed25519.pub') }}"

- name: Mount USB disk
  mount:
    path: /mnt/usb
    src: /dev/sda1
    fstype: ext4
    opts: noatime,nodiratime
    state: mounted

- name: Enable hd-idle
  ini_file:
    path: /etc/default/hd-idle
    no_extra_spaces: yes
    section: null
    option: HD_IDLE_OPTS
    value: '"-i 600 -a /dev/sda"'
  notify: restart hd-idle

#################################################
# Cloudflared
#################################################

- name: Install cloudflared
  apt:
    deb: "{{ cloudflared_deb_url }}"
  register: result
  until: result is succeeded

- name: Copy cloudflared systemd unit file into place
  template:
    src: files/etc/systemd/system/cloudflared.service
    dest: /etc/systemd/system/cloudflared.service
    owner: root
    group: root
    mode: 0644
  notify: reload systemd

- name: Configure cloudflared
  copy:
    dest: /etc/default/cloudflared
    content: |
      CLOUDFLARED_TOKEN={{ cloudflared_token }}
  notify: restart cloudflared

#################################################
# Home Assistant
#################################################

- name: Create hass config directory (/var/lib/hass_config)
  file:
    path: /var/lib/hass_config/.storage
    state: directory
    recurse: yes

- name: Copy configuration.yaml for Home Assistand to /var/lib/hass_config/
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: 0644
  loop:
    - dest: /var/lib/hass_config/automations.yaml
      src: files/var/lib/hass_config/automations.yaml.j2
    - dest: /var/lib/hass_config/configuration.yaml
      src: files/var/lib/hass_config/configuration.yaml.j2
    - dest: /var/lib/hass_config/scenes.yaml
      src: files/var/lib/hass_config/scenes.yaml.j2
    - dest: /var/lib/hass_config/scripts.yaml
      src: files/var/lib/hass_config/scripts.yaml.j2
    - dest: /var/lib/hass_config/.storage/auth_provider.homeassistant
      src: files/var/lib/hass_config/.storage/auth_provider.homeassistant.j2
    - dest: /var/lib/hass_config/.storage/onboarding
      src: files/var/lib/hass_config/.storage/onboarding.j2
    - dest: /var/lib/hass_config/.storage/person
      src: files/var/lib/hass_config/.storage/person.j2

- name: Home Assistant container
  containers.podman.podman_container:
    name: homeassistant
    image: ghcr.io/home-assistant/home-assistant:stable
    volume:
      - /etc/localtime:/etc/localtime:ro
      - /var/lib/hass_config:/config:Z
    network: host
    privileged: yes
    label:
      io.containers.autoupdate: registry
    generate_systemd:
      path: /etc/systemd/system
    hostname: "{{ inventory_hostname }}"

- name: Enable Home Assistant container via systemd
  systemd:
    daemon_reload: yes
    name: container-homeassistant
    enabled: yes
    state: started

#################################################
# HaaS
#################################################

- name: Install haas_proxy
  apt:
    deb: "{{ haas_proxy_deb_url }}"
  register: result
  until: result is succeeded

- name: Copy haas_proxy systemd unit file into place
  template:
    src: files/etc/systemd/system/haas_proxy.service
    dest: /etc/systemd/system/haas_proxy.service
    owner: root
    group: root
    mode: 0644
  notify: reload systemd

- name: Configure haas_proxy
  copy:
    dest: /etc/default/python3-haas_proxy
    content: |
      DEVICE_TOKEN={{ haas_proxy_device_token }}
  notify: restart haas_proxy

#################################################
# Samba
#################################################

- name: Configure Samba (smb.conf)
  template:
    dest: /etc/samba/smb.conf
    src: files/etc/samba/smb.conf.j2
  notify: restart samba

- name: Create local credential file for smaba
  delegate_to: localhost
  copy:
    dest: "{{ lookup('env','HOME') }}/Documents/secrets/{{ inventory_hostname }}-cifs-credentials"
    content: |
      [{{ inventory_hostname }}]
      username=pi
      password={{ samba_pi_password }}
    mode: 0600
    owner: "{{ lookup('env','USER') }}"

- name: Set SMB password for pi
  shell: ( echo {{ samba_pi_password }} ; echo {{ samba_pi_password }} ) | smbpasswd -a -s pi
  changed_when: false

#################################################
# Pi-hole + hostapd = Wi-Fi AP
#################################################

# https://discourse.pi-hole.net/t/mobile-pi-hole-on-usb-ethernet-gadget-pi-4-wifi-access-point/47226/2
# https://gist.github.com/acoomans/ee909ea00b4b83c5767d0674156b4775

- name: Check if the wlan0 / phy0 is "blocked"
  command: rfkill --json
  register: rfkill
  changed_when: false

- name: Enable wlan0 / phy0 if needed
  command: rfkill unblock 0
  when: rfkill.stdout | from_json | json_query('""[?id==`0`].soft') == ["blocked"]

- name: Configure static IP for wlan0
  blockinfile:
    dest: /etc/dhcpcd.conf
    block: |
      interface wlan0
        static ip_address={{ wifi_api_ip_subnet }}.1/24
        nohook wpa_supplicant
  notify: restart dhcpcd

- name: Install hostapd
  apt:
    name: hostapd
    install_recommends: no
  register: result
  until: result is succeeded

- name: Additional hostapd configuration
  template:
    dest: /etc/hostapd/hostapd.conf
    src: files/etc/hostapd/hostapd.conf.j2
    mode: 0600
  notify: restart hostapd

- name: Add DAEMON_CONF to /etc/default/hostapd
  ini_file:
    path: /etc/default/hostapd
    section: null
    no_extra_spaces: yes
    option: DAEMON_CONF
    value: "/etc/hostapd/hostapd.conf"
  notify: restart hostapd

- name: Enable IPv4 Forwarding
  sysctl:
    name: net.ipv4.ip_forward
    value: '1'

- name: Create /etc/pihole directory
  file:
    path: /etc/pihole
    state: directory
    mode: u=rwx,g=rwx,o=rx

- name: Prepare Pi-hole unattended installation file
  template:
    dest: /etc/pihole/setupVars.conf
    src: files/etc/pihole/setupVars.conf.j2
  # This file is often modified by pi-hole
  changed_when: false

- name: Install Pi-hole
  shell: curl -L https://install.pi-hole.net | bash /dev/stdin --unattended
  args:
    warn: no
    creates: /usr/bin/pihole-FTL

- name: Configure Pi-hole dnsmasq
  template:
    dest: /etc/dnsmasq.d/00-dnsmasq.conf
    src: files/etc/dnsmasq.d/00-dnsmasq.conf.j2
  notify: restart pihole-FTL

- name: Add Adlists to Pi-hole
  command: sqlite3 /etc/pihole/gravity.db "INSERT INTO adlist (address, enabled, comment) VALUES ('{{ item.url }}', 1, '{{ item.comment }}');"
  args:
    creates: "/etc/pihole/{{ item.creates }}"
  loop:
    - url: https://raw.githubusercontent.com/PolishFiltersTeam/KADhosts/master/KADhosts.txt
      comment: firebog.net - Suspicious Lists
      creates: list.2.raw.githubusercontent.com.domains
    - url: https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.Spam/hosts
      comment: firebog.net - Suspicious Lists
      creates: list.3.raw.githubusercontent.com.domains
    - url: https://v.firebog.net/hosts/static/w3kbl.txt
      comment: firebog.net - Suspicious Lists
      creates: list.4.v.firebog.net.domains
    - url: https://adaway.org/hosts.txt
      comment: firebog.net - Advertising Lists
      creates: list.5.adaway.org.domains
    - url: https://v.firebog.net/hosts/AdguardDNS.txt
      comment: firebog.net - Advertising Lists
      creates: list.6.v.firebog.net.domains
    - url: https://v.firebog.net/hosts/Admiral.txt
      comment: firebog.net - Advertising Lists
      creates: list.7.v.firebog.net.domains
    - url: https://v.firebog.net/hosts/Easyprivacy.txt
      comment: firebog.net - Tracking & Telemetry Lists
      creates: list.8.v.firebog.net.domains
    - url: https://v.firebog.net/hosts/Prigent-Ads.txt
      comment: firebog.net - Tracking & Telemetry Lists
      creates: list.9.v.firebog.net.domains
    - url: https://raw.githubusercontent.com/FadeMind/hosts.extras/master/add.2o7Net/hosts
      comment: firebog.net - Tracking & Telemetry Lists
      creates: list.10.raw.githubusercontent.com.domains
    - url: https://raw.githubusercontent.com/DandelionSprout/adfilt/master/Alternate%20versions%20Anti-Malware%20List/AntiMalwareHosts.txt
      comment: firebog.net - Malicious Lists
      creates: list.11.raw.githubusercontent.com.domains
    - url: https://osint.digitalside.it/Threat-Intel/lists/latestdomains.txt
      comment: firebog.net - Malicious Lists
      creates: list.12.osint.digitalside.it.domains
    - url: https://s3.amazonaws.com/lists.disconnect.me/simple_malvertising.txt
      comment: firebog.net - Malicious Lists
      creates: list.13.s3.amazonaws.com.domains
    - url: https://gitlab.com/quidsup/notrack-blocklists/raw/master/notrack-malware.txt
      comment: firebog.net - Malicious Lists
      creates: list.14.gitlab.com.domains
  notify: refresh pihole ad list

#################################################
# Transmission (http://raspi.xvx.cz:9991/web/)
#################################################

- name: Create "torrent" directories in /mnt/
  file:
    path: "{{ item }}"
    recurse: yes
    state: directory
    owner: debian-transmission
    group: debian-transmission
    mode: 0775
  loop:
    - /mnt/usb/torrents/torrents-completed
    - /mnt/usb/torrents/torrents-incomplete

- name: Configure Transmission
  template:
    dest: /etc/transmission-daemon/settings.json
    src: files/etc/transmission-daemon/settings.json.j2
  # These files are frequently updated by Transmission
  changed_when: false
  notify: reload transmission

- name: Install blacklist file for transmission
  unarchive:
    src: "{{ transmission_blocklist_url }}&archiveformat=zip"
    dest: /var/lib/transmission-daemon/info/blocklists/
    owner: debian-transmission
    group: debian-transmission
    remote_src: yes

- name: Install Transmission torrent done script
  template:
    dest: /etc/transmission-daemon/torrent-done.sh
    src: files/etc/transmission-daemon/torrent-done.sh.j2
    mode: 0755

- name: Add user 'pi' to debian-transmission group
  user:
    name: pi
    append: yes
    groups: debian-transmission

#################################################
# grafana-agent
#################################################

- name: Install grafana-agent
  apt:
    deb: "{{ grafana_agent_deb_url }}"
  register: result
  until: result is succeeded

- name: Configure grafana-agent
  template:
    dest: /etc/grafana-agent.yaml
    src: files/etc/grafana-agent.yaml.j2
  notify: restart grafana-agent

- name: Configure prometheus-blackbox-exporter
  copy:
    dest: /etc/prometheus/blackbox.yml
    src: files/etc/prometheus/blackbox.yml
  notify: restart prometheus-blackbox-exporter

#################################################
# Kodi
#################################################

- name: Add kodi group
  group:
    name: kodi

- name: Add kodi user
  user:
    name: kodi
    comment: Kodi
    shell: /usr/bin/sh
    groups: audio,input,uucp,video
    group: kodi

- name: Create sudoers file for Kodi
  copy:
    src: etc/sudoers.d/020_kodi
    dest: /etc/sudoers.d/020_kodi
  register: kodi_service

- name: Create startup script for Kodi
  copy:
    src: lib/systemd/system/kodi.service
    dest: /lib/systemd/system/kodi.service
  register: kodi_service

- name: Reload systemd
  systemd:
    daemon_reload: yes
  when: kodi_service.changed

- name: Create Kodi addon directory (/home/kodi/.kodi/addons)
  file:
    path: /home/kodi/.kodi/addons
    state: directory
    recurse: yes
    owner: kodi
    group: kodi

- name: Get the latest version of YouTube Kodi plugin
  uri:
    url: https://api.github.com/repos/anxdpanic/plugin.video.youtube/releases/latest
  register: github_api_youtube_kodi_plugin

- name: Download and unpack the YouTube Kodi plugin
  unarchive:
    src: "{{ github_api_youtube_kodi_plugin.json.assets[0].browser_download_url }}"
    dest: /home/kodi/.kodi/addons/
    remote_src: yes
    creates: /home/kodi/.kodi/addons/plugin.video.youtube

- name: Copy Kodi configuration files
  synchronize:
    src: home/kodi/.kodi
    dest: /home/kodi/
  # These files are frequently updated by Kodi
  changed_when: false
  notify: restart kodi

- name: Additional Kodi configuration
  template:
    dest: "{{ item.dest }}"
    src: "{{ item.src }}"
    mode: 0600
  loop:
    - dest: /home/kodi/.kodi/userdata/guisettings.xml
      src: files/home/kodi/.kodi/userdata/guisettings.xml.j2
  # These files are frequently updated by Kodi
  changed_when: false

- name: Chown "/home/kodi"
  file:
    path: /home/kodi
    owner: kodi
    group: kodi
    recurse: yes
  changed_when: false

# It happens sometimes, that the Kodi don't start for the first time - SubState": "dead"
- name: Start Kodi
  systemd:
    name: kodi
    state: started
    enabled: yes
  register: result
  until: result.status.SubState == "running"

- name: Wait for Kodi to be started
  wait_for:
    port: 8080

- name: Enable YouTube Kodi plugin in database
  command: sqlite3 /home/kodi/.kodi/userdata/Database/Addons33.db "UPDATE installed SET enabled = 1 WHERE addonID = 'plugin.video.youtube'"
  register: result
  until: result is succeeded
  delay: 10
  changed_when: false

- name: Enable Kodi Visualization addon spectrum
  command: sqlite3 /home/kodi/.kodi/userdata/Database/Addons33.db "UPDATE installed SET enabled = 1 WHERE addonID = '{{ item }}'"
  loop:
    - visualization.spectrum
  register: result
  until: result is succeeded
  delay: 10
  changed_when: false

- name: Set content for Music
  command: sqlite3 /home/kodi/.kodi/userdata/Database/MyMusic82.db "INSERT OR IGNORE INTO path VALUES(1,'/mnt/usb/music/','12aa680d4b25256c69b20c0591b57e72');"
  register: result
  until: result is succeeded
  delay: 10
  changed_when: false

- name: Flush handlers
  meta: flush_handlers

- name: Wait for Kodi to be started
  wait_for:
    port: 8080

- name: Refresh Music Library
  no_log: true
  uri:
    url: http://{{ ansible_host }}:8080/jsonrpc
    user: kodi
    password: "{{ kodi_guisettings_services_webserverpassword }}"
    method: POST
    body: '{ "jsonrpc": "2.0", "method": "AudioLibrary.Scan", "id": "ansible" }'
    force_basic_auth: yes
    body_format: json
